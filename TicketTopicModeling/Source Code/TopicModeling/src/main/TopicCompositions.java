package main;
//Code Author: Kayhan Moharreri

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;

public class TopicCompositions {
	
	public HashMap<String, Pair> FileMap;
	private int CurrentTopicNo; 
	
	public TopicCompositions (int i){
		
		FileMap = new HashMap<String, Pair>();
		CurrentTopicNo = i;
	}
	
	
	public void loadToMap (String CompositionFilename) throws IOException
	{
		
		
		int lineCounter = -1;
		 	File file = new File(CompositionFilename); //Full path of the csv file
			BufferedReader br = new BufferedReader(new FileReader(file));
			 String thisLine = "";
			 String lineReferencePath = "";
			 int topicNumber = 0;
			 double topicProbability = 0.00;
				  
			 while ((thisLine = br.readLine()) != null) {
				 if (lineCounter!=-1)
				 {
					 lineReferencePath = thisLine.split(",")[1];  //Example:  file:/C:/Users/MyTest2/Autogenerated--"+OptinalArguments.currentTime+ "/inputs/1.txt
					 lineReferencePath = lineReferencePath.substring(lineReferencePath.lastIndexOf('/')+1);    //Example: 2.txt
					 
					 topicNumber = Integer.parseInt(thisLine.split(",")[2]);
					 topicProbability = Double.parseDouble(thisLine.split(",")[3]);
					 
					 Pair P = new Pair(topicNumber,topicProbability);
					 FileMap.put(lineReferencePath,P);
				 }
				 
				 lineCounter++;
			 }
			 br.close();
		
		
		
	}
	
	public Pair searchItem (int targetNumber) {
		
		if(FileMap.containsKey(Integer.toString(targetNumber)+".txt" )){
		
			return (FileMap.get( Integer.toString(targetNumber)+".txt" ) ) ;
		}
		else
		{
			return new Pair(0,0);
		}
	}
	
	public Integer[] topicFreqCount()
	{
		Integer[] freqs= new Integer [CurrentTopicNo];
		for (int i=0;i<CurrentTopicNo; i++)
			freqs[i] = 0;
		
		
		for (int i=0;i<CurrentTopicNo; i++)
		{
		
		   Iterator<Map.Entry<String, Pair>> it =  FileMap.entrySet().iterator();
		   while (it.hasNext()) {
			   Map.Entry<String, Pair> pairs = it.next();
			   if (pairs.getValue().getfirst()==i)
			   {
				   freqs[i]++;
			   }
			   //it.remove(); // avoids a ConcurrentModificationException
		   }
		}
		return freqs;
	}
		


}
