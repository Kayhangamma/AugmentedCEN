package main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import fileHandler.EquivalencyFileHandler;
import fileHandler.GroupFileHandler;

public class MainClass {
	
	 public static void main(String[] args) throws IOException {
		 
		 
		 //String tester = "-Blacklist black.txt -Min 2 -Max 5 -Fields Resolution Description -Groups grouped.txt -Eqlist eql.txt";
		 //args = tester.split(" ");
		 
		 //Jar file location finder
		 File F = new File(MainClass.class.getProtectionDomain().getCodeSource().getLocation().getPath());
		 
		 boolean success = (new File(F.getParent()+"\\Autogenerated--"+OptinalArguments.currentTime+ "\\inputs")).mkdirs();
		 if (!success) {
		     //System.err.println("Error: Folder was not created!");
		     //System.exit(0);
		 }
		 		 
		 OptinalArguments.argParse(args);
		 
		 GroupFileHandler G = null ;
		 EquivalencyFileHandler E = null;
		 if (OptinalArguments.hasGroups) 
		 {
			 G = new GroupFileHandler(OptinalArguments.groupsFile);
		 }
		 if (OptinalArguments.hasEqlist)
		 {
			 E = new EquivalencyFileHandler(OptinalArguments.EqFile);
		 }
		 
		 
		 
		 //Resolution Generation
		 ResolutionGenerator.extractResolution(F.getParent()+"\\Data.xls", F, OptinalArguments.Fields);
		 File file = new File(F.getParent()+"\\Autogenerated--"+OptinalArguments.currentTime+ "\\AllMerged.csv");
		 
		 BufferedReader br = new BufferedReader(new FileReader(file));
		 String line;
		 String templine;
		 int errorcount=0;
		 int fieldCounter = 1;
		 while ((line = br.readLine()) != null) {
			// create a text file with that reads between ""
			 if ( line.length()>0 && line.charAt(0)=='"' && line.charAt(line.length()-1)=='"'){
				spliterWriter(Integer.toString(fieldCounter) + ".txt" , line, F, G, E);
			 	fieldCounter++;
			 }
			 else if ( line.length()>0 && line.charAt(0)=='"' && line.charAt(line.length()-1)!='"'){
				 while ((templine = br.readLine()) != null) {
					 line = line +"\n" +templine;
					 if (templine.length()>0 && templine.charAt(templine.length()-1)=='"'){
						spliterWriter(Integer.toString(fieldCounter) + ".txt" , line, F, G, E);
						//STEMMING HERE
						//spliterWriter(Integer.toString(fieldCounter) + ".txt",Stemmer.Stemming(F.getParent()+"\\Autogenerated--"+OptinalArguments.currentTime+ "\\inputs\\"+Integer.toString(fieldCounter)+".txt"), F);
						//STEMMING DONE
						fieldCounter++;
					 	break;
					 }
				 }
				 
			 }
			 else {
				 //errorcount ++;
				 //System.err.println("Error:" +fieldCounter);
			 }
		 }
		 
		 System.out.println(errorcount +" Errors");
		 br.close();
		 
		 
		 //Mallet Calls
		 String inputPath = F.getParent()+"\\Autogenerated--"+OptinalArguments.currentTime+ "\\inputs";
		 malletCall.train(inputPath, F);
		 
		 
		 
	 }

	 

	 
	 
	 public static void spliterWriter (String Filename, String line, File F, GroupFileHandler G, EquivalencyFileHandler E){
	
			try {
				 
				//String content = "This is the content to write into file";
	 
				File file = new File(F.getParent()+"\\Autogenerated--"+OptinalArguments.currentTime+ "\\inputs\\"+Filename);
	 
				// if file doesnt exists, then create it
				if (!file.exists()) {
					file.createNewFile();
				}
	 
				FileWriter fw = new FileWriter(file.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				
				line = line.replaceAll("\\d\\d/\\d\\d/\\d\\d \\d\\d:\\d\\d:\\d\\d [(][\\w]*[)]:","").replaceAll("[*][*] .* [*][*](-){5}", "");
				
				if (OptinalArguments.hasGroups)
				{
					line = G.replaceByGroup(line);
				}
				if (OptinalArguments.hasEqlist)
				{
					line = E.replaceByParent(line);
				}
				
				
				bw.write(line);
				bw.close();
	 
			} catch (IOException e) {
				e.printStackTrace();
			}
	 }
}



